## Get and plot sub-graph from Theses main graph generated by GenerateGenealogyGraph
## 
## Vincent Crocher - 2022

import pandas as pd
import networkx as nx
import mpu
import difflib


## Extract a given field from pd
def get_this(indf, field, wherethisone, isthis):
	tmp=indf[indf[wherethisone]==isthis];
	return tmp.at[tmp.index[0], field];

## Find closest name and associated id
def find_closest(search):
	options=difflib.get_close_matches(search, search_l, n=5, cutoff=0.4)
	f=options[0]
	pid=[k for k,v in mapping.items() if v == f]
	return pid[0]

## Find closest possible names and associated ids
def find_closest_suggestions(search):
	options=difflib.get_close_matches(search, search_l, n=5, cutoff=0.4)
	pids=[]
	for o in options:
		pid=[k for k,v in mapping.items() if v == o]
		pids.append(pid[0])
	return pids, options


## Subgrah around given node
def get_subgraph(start_node, mapping):
	Gd=nx.bfs_tree(G, start_node) #Get nodes downwards only
	Gu=nx.bfs_tree(G, start_node, reverse=True) #Get nodes upwards only
	G2 = nx.compose(Gd,Gu.reverse()) #Merge both
	G2=nx.relabel_nodes(G2, mapping);
	return G2


## Local quick display
def draw_local(start_node, mapping):
	G2=get_subgraph(start_node, mapping)
	nx.draw(G2, pos=nx.nx_agraph.graphviz_layout(G2, prog='dot'), arrows=None, with_labels=True, node_size=0, font_size=16)


## Format for agraph
def agraph_format(G2):
	A = nx.nx_agraph.to_agraph(G2)
	A.layout('dot', args='-Nfontsize=10 -Nwidth=".2" -Nheight=".2" -Nmargin=0 -Gfontsize=8')
	return A

## To neat PNG
def draw_png(start_node, mapping):
	G2=get_subgraph(start_node, mapping)
	A = agraph_format(G2)
	A.draw('out.png')

## To neat SVG
def draw_svg(start_node, mapping):
	G2=get_subgraph(start_node, mapping)
	A = agraph_format(G2)
	A.draw('out.svg')

## To dot file
def draw_dot(start_node, mapping):
	G2=get_subgraph(start_node, mapping)
	nx.nx_agraph.write_dot(G2,'out.dot')


## Load data
G = nx.read_gpickle('ThesesAssocGraph.gpickle')
mapping=mpu.io.read('ThesesMapping.pickle')
people=mpu.io.read('ThesesPeople.pickle')
#clean mapping list from NaNs
search_l=list(mapping.values())
search_l = {i for i in search_l if type(i)==str}




Key='Nicolas Le bihan'

start_nodes, sug=find_closest_suggestions(Key)
print(sug)


## Select sub-graph
start_node=start_nodes[0]
get_subgraph(start_node, mapping)

## Use drawing method:
#draw_local(start_node, mapping)
#draw_png(start_node, mapping)
draw_svg(start_node, mapping)
#draw_dot(start_node, mapping)

